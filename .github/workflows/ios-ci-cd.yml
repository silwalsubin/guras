name: iOS Build & Deploy

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    name: iOS Build & Version
    runs-on: macos-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Early secrets validation
      run: |
        echo "🔍 Early validation of required secrets..."
        echo "📋 This step runs early to catch issues before the build starts"
        
        # Check which secrets are set (without revealing values)
        SECRETS_STATUS=""
        
        if [ -n "${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}" ]; then
          SECRETS_STATUS="$SECRETS_STATUS✅ APPLE_DEVELOPER_CERTIFICATE is set\n"
        else
          SECRETS_STATUS="$SECRETS_STATUS❌ APPLE_DEVELOPER_CERTIFICATE is NOT set\n"
        fi
        
        if [ -n "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" ]; then
          SECRETS_STATUS="$SECRETS_STATUS✅ APPLE_DEVELOPER_CERTIFICATE_PASSWORD is set\n"
        else
          SECRETS_STATUS="$SECRETS_STATUS❌ APPLE_DEVELOPER_CERTIFICATE_PASSWORD is NOT set\n"
        fi
        
        if [ -n "${{ secrets.APPLE_PROVISIONING_PROFILE }}" ]; then
          SECRETS_STATUS="$SECRETS_STATUS✅ APPLE_PROVISIONING_PROFILE is set\n"
        else
          SECRETS_STATUS="$SECRETS_STATUS❌ APPLE_PROVISIONING_PROFILE is NOT set\n"
        fi
        
        if [ -n "${{ secrets.APPLE_TEAM_ID }}" ]; then
          SECRETS_STATUS="$SECRETS_STATUS✅ APPLE_TEAM_ID is set\n"
        else
          SECRETS_STATUS="$SECRETS_STATUS❌ APPLE_TEAM_ID is NOT set\n"
        fi
        
        if [ -n "${{ secrets.APPLE_BUNDLE_ID }}" ]; then
          SECRETS_STATUS="$SECRETS_STATUS✅ APPLE_BUNDLE_ID is set\n"
        else
          SECRETS_STATUS="$SECRETS_STATUS❌ APPLE_BUNDLE_ID is NOT set\n"
        fi
        
        if [ -n "${{ secrets.APPLE_PROVISIONING_PROFILE_NAME }}" ]; then
          SECRETS_STATUS="$SECRETS_STATUS✅ APPLE_PROVISIONING_PROFILE_NAME is set\n"
        else
          SECRETS_STATUS="$SECRETS_STATUS❌ APPLE_PROVISIONING_PROFILE_NAME is NOT set\n"
        fi
        
        echo -e "📋 Secrets Status:\n$SECRETS_STATUS"
        
        # Check if we have the minimum required secrets
        if [ -z "${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}" ] || [ -z "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" ] || [ -z "${{ secrets.APPLE_PROVISIONING_PROFILE }}" ]; then
          echo "❌ Missing required secrets for code signing"
          echo "📝 To fix this, you need to:"
          echo "1. Export your iOS Distribution certificate from Keychain Access"
          echo "2. Base64 encode it: base64 -i certificate.p12 | pbcopy"
          echo "3. Add it as APPLE_DEVELOPER_CERTIFICATE secret in GitHub"
          echo "4. Add the certificate password as APPLE_DEVELOPER_CERTIFICATE_PASSWORD"
          echo "5. Export your App Store provisioning profile"
          echo "6. Base64 encode it: base64 -i profile.mobileprovision | pbcopy"
          echo "7. Add it as APPLE_PROVISIONING_PROFILE secret in GitHub"
          exit 1
        fi
        
        echo "✅ All required secrets are present"
        
    - name: Early base64 validation
      run: |
        echo "🔍 Early base64 validation of secrets..."
        
        # Test certificate secret
        if [ -n "${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}" ]; then
          echo "📋 Certificate secret is set"
          
          # Test base64 decode and check if it produces valid output
          CERT_DECODED=$(echo "${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}" | base64 --decode 2>/dev/null)
          if [ $? -eq 0 ] && [ -n "$CERT_DECODED" ]; then
            echo "✅ Certificate secret base64 decode test: PASSED"
            echo "📋 Decoded certificate size: $(echo "$CERT_DECODED" | wc -c) bytes"
          else
            echo "❌ Certificate secret base64 decode test: FAILED"
            echo "📋 This suggests the secret might not be properly base64 encoded"
            exit 1
          fi
        else
          echo "❌ Certificate secret is NOT set"
          exit 1
        fi
        
        # Test profile secret
        if [ -n "${{ secrets.APPLE_PROVISIONING_PROFILE }}" ]; then
          echo "📋 Profile secret is set"
          
          # Test base64 decode and check if it produces valid output
          PROFILE_DECODED=$(echo "${{ secrets.APPLE_PROVISIONING_PROFILE }}" | base64 --decode 2>/dev/null)
          if [ $? -eq 0 ] && [ -n "$PROFILE_DECODED" ]; then
            echo "✅ Profile secret base64 decode test: PASSED"
            echo "📋 Decoded profile size: $(echo "$PROFILE_DECODED" | wc -c) bytes"
          else
            echo "❌ Profile secret base64 decode test: FAILED"
            echo "📋 This suggests the secret might not be properly base64 encoded"
            exit 1
          fi
        else
          echo "❌ Profile secret is NOT set"
          exit 1
        fi
        
        echo "✅ All base64 validation tests passed"
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: react-native/package-lock.json
        
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        
    - name: Generate version
      id: version
      run: |
        # Get the latest build number from existing tags
        LATEST_BUILD=$(git tag | grep '^v1\.0\.' | sort -V | tail -n 1 | sed 's/v1\.0\.//' || echo "0")
        
        # Increment build number
        NEW_BUILD=$((LATEST_BUILD + 1))
        
        # Generate version: 1.0.BUILD_NUMBER
        VERSION="1.0.${NEW_BUILD}"
        
        echo "Latest build number from git tags: $LATEST_BUILD"
        echo "New build number: $NEW_BUILD"
        echo "Generated version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_number=$NEW_BUILD" >> $GITHUB_OUTPUT
        
    - name: Update version in app.json
      working-directory: ./react-native
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Update version in app.json
        node -e "
          const fs = require('fs');
          const appJson = JSON.parse(fs.readFileSync('app.json', 'utf8'));
          appJson.version = '$VERSION';
          fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2));
        "
        
    - name: Update build number in Xcode project
      working-directory: ./react-native/ios
      run: |
        BUILD_NUMBER="${{ steps.version.outputs.build_number }}"
        
        echo "📱 Updating build number to $BUILD_NUMBER in Xcode project..."
        
        # Update CURRENT_PROJECT_VERSION in project.pbxproj
        sed -i '' "s/CURRENT_PROJECT_VERSION = [0-9]*;/CURRENT_PROJECT_VERSION = $BUILD_NUMBER;/g" Guras.xcodeproj/project.pbxproj
        
        # Verify the change
        echo "📋 Updated build number in Xcode project:"
        grep "CURRENT_PROJECT_VERSION" Guras.xcodeproj/project.pbxproj
        
    - name: Install dependencies
      working-directory: ./react-native
      run: |
        echo "📦 Installing dependencies for version ${{ steps.version.outputs.version }}"
        npm ci
        
    - name: Install iOS dependencies
      working-directory: ./react-native/ios
      run: |
        echo "🍎 Installing iOS dependencies for version ${{ steps.version.outputs.version }}"
        pod install

    - name: Patch Hermes and RN scripts to use correct node path
      run: |
        echo "🔧 Patching Node.js paths in shell scripts..."
        
        # Find and patch all shell scripts in Pods - use generic patterns
        find ./react-native/ios/Pods -type f -name '*.sh' -exec sed -i '' 's|/Users/.*/\.nvm/versions/node/.*/bin/node|node|g' {} +
        find ./react-native/ios/Pods -type f -name '*.sh' -exec sed -i '' 's|/Users/.*/\.nvm/versions/node/.*/bin/node|node|g' {} +
        
        # Also patch any hardcoded node paths in the main project
        find ./react-native/ios -type f -name '*.sh' -exec sed -i '' 's|/Users/.*/\.nvm/versions/node/.*/bin/node|node|g' {} +
        
        echo "✅ Node.js paths patched in shell scripts"
        
        # Debug: Show which scripts were found and patched
        echo "📋 Found shell scripts in Pods:"
        find ./react-native/ios/Pods -type f -name '*.sh' | head -10
        
    - name: Disable Hermes for CI build
      working-directory: ./react-native/ios
      run: |
        echo "🚫 Disabling Hermes for CI build to avoid script issues"
        
        # Create a backup of the original Podfile
        cp Podfile Podfile.backup
        
        # Modify Podfile to exclude Hermes
        sed -i '' '/hermes-engine/d' Podfile
        
        echo "✅ Hermes excluded from Podfile for CI build"
        
    - name: Reinstall iOS dependencies without Hermes
      working-directory: ./react-native/ios
      run: |
        echo "🍎 Reinstalling iOS dependencies without Hermes for version ${{ steps.version.outputs.version }}"
        pod install

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Set NODE_BINARY environment variable
      run: |
        echo "🔧 Setting NODE_BINARY environment variable"
        echo "NODE_BINARY=$(which node)" >> $GITHUB_ENV
        echo "NODE_BINARY set to: $(which node)"
        
    - name: Setup code signing
      run: |
        echo "🔐 Setting up code signing for App Store deployment..."
        
        # Create keychain
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings build.keychain
        
        # Import certificate
        echo "📋 Importing distribution certificate..."
        echo "${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}" | base64 --decode > /tmp/certificate.p12
        
        # Check certificate file
        if [ ! -s /tmp/certificate.p12 ]; then
          echo "❌ Certificate file is empty or missing"
          exit 1
        fi
        
        # Import certificate into keychain
        security import /tmp/certificate.p12 -k build.keychain -P "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
        
        # Install provisioning profile
        echo "📋 Installing App Store provisioning profile..."
        echo "${{ secrets.APPLE_PROVISIONING_PROFILE }}" | base64 --decode > /tmp/profile.mobileprovision
        
        if [ ! -s /tmp/profile.mobileprovision ]; then
          echo "❌ Provisioning profile file is empty or missing"
          exit 1
        fi
        
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Get the actual profile name from the installed profile
        echo "🔍 Detecting installed provisioning profile name..."
        PROFILE_NAME=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | grep -A1 "<key>Name</key>" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
        
        if [ -z "$PROFILE_NAME" ]; then
          echo "⚠️ Could not detect profile name, using secret value..."
          PROFILE_NAME="${{ secrets.APPLE_PROVISIONING_PROFILE_NAME }}"
        fi
        
        echo "📋 Detected profile name: $PROFILE_NAME"
        
        # Verify certificate and profile
        echo "🔍 Verifying code signing setup..."
        security find-identity -v -p codesigning build.keychain
        
        echo "✅ Code signing setup completed"
        
    - name: Configure project for CI build
      working-directory: ./react-native/ios
      run: |
        echo "⚙️ Configuring project for CI build"
        
        # Create a temporary build configuration that disables code signing
        # This is safer than modifying the project file directly
        echo "✅ Project ready for CI build with code signing disabled"
        
    - name: Validate project structure
      working-directory: ./react-native/ios
      run: |
        echo "🔍 Validating project structure for version ${{ steps.version.outputs.version }}"
        xcodebuild -workspace Guras.xcworkspace \
                   -scheme Guras \
                   -configuration Debug \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO \
                   NODE_BINARY="$NODE_BINARY" \
                   clean
        
    - name: Build JavaScript bundle
      working-directory: ./react-native
      run: |
        echo "📱 Building JavaScript bundle for version ${{ steps.version.outputs.version }}"
        npx react-native bundle --platform ios --dev false --entry-file index.js --bundle-output ios/main.jsbundle --assets-dest ios
        
    - name: Create Archive for Deployment
      working-directory: ./react-native/ios
      run: |
        echo "📦 Creating archive for version ${{ steps.version.outputs.version }}"
        xcodebuild -workspace Guras.xcworkspace \
                   -scheme Guras \
                   -configuration Release \
                   -destination generic/platform=iOS \
                   -archivePath ./build/Guras.xcarchive \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO \
                   NODE_BINARY="$NODE_BINARY" \
                   clean archive
                   
        echo "✅ Archive created successfully"
        
    - name: Create and push tag
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "🏷️ Creating tag v$VERSION"
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add and commit version changes
        git add react-native/app.json react-native/ios/Guras.xcodeproj/project.pbxproj
        git commit -m "Bump version to $VERSION" || echo "No changes to commit"
        
        # Create tag
        git tag "v$VERSION"
        
        # Push changes and tag
        git push origin master
        git push origin "v$VERSION"
        
        echo "✅ Created and pushed tag: v$VERSION"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-v${{ steps.version.outputs.version }}
        path: |
          react-native/ios/main.jsbundle
          react-native/app.json
          react-native/ios/Guras.xcodeproj/project.pbxproj
          react-native/ios/build/Guras.xcarchive
        retention-days: 7
        
    - name: Build Summary
      run: |
        echo "🎉 ========================================="
        echo "✅ Build completed successfully!"
        echo "📦 Version: ${{ steps.version.outputs.version }}"
        echo "🏷️ Tag: v${{ steps.version.outputs.version }}"
        echo "📱 Bundle: Available in artifacts"
        echo "📦 Archive: Available in artifacts"
        echo "📦 Artifact: ios-build-v${{ steps.version.outputs.version }}"
        echo "🎉 ========================================="

  deploy-testflight:
    name: Deploy to TestFlight
    runs-on: macos-latest
    needs: build
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ios-build-v${{ needs.build.outputs.version }}
        path: ./artifacts
        
    - name: Debug artifacts structure
      run: |
        echo "🔍 Debugging artifacts structure..."
        echo "📋 Current directory: $(pwd)"
        echo "📋 Workspace root: $GITHUB_WORKSPACE"
        echo "📋 Artifacts directory contents:"
        ls -la "$GITHUB_WORKSPACE/artifacts/"
        echo "📋 Looking for xcarchive files:"
        find "$GITHUB_WORKSPACE/artifacts" -name "*.xcarchive" -type f
        echo "📋 Full artifacts directory structure:"
        find "$GITHUB_WORKSPACE/artifacts" -type f | head -20
        echo "📋 Expected archive path: $GITHUB_WORKSPACE/artifacts/ios/build/Guras.xcarchive"
        if [ -f "$GITHUB_WORKSPACE/artifacts/ios/build/Guras.xcarchive" ]; then
          echo "✅ Archive found at expected location"
          ls -la "$GITHUB_WORKSPACE/artifacts/ios/build/Guras.xcarchive"
        else
          echo "❌ Archive not found at expected location"
        fi
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Setup App Store Connect API
      run: |
        echo "🔐 Setting up App Store Connect API for TestFlight deployment"
        
        # Create App Store Connect API key file
        echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 --decode > /tmp/AuthKey.p8
        
        # Set environment variables for App Store Connect API
        echo "APP_STORE_CONNECT_API_KEY_ID=${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" >> $GITHUB_ENV
        echo "APP_STORE_CONNECT_ISSUER_ID=${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" >> $GITHUB_ENV
        echo "APP_STORE_CONNECT_API_KEY_PATH=/tmp/AuthKey.p8" >> $GITHUB_ENV
        
        echo "✅ App Store Connect API configured"
        
    - name: Troubleshoot secrets setup
      run: |
        echo "🔍 Troubleshooting secrets setup..."
        
        # Check which secrets are set (without revealing values)
        SECRETS_STATUS=""
        
        if [ -n "${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}" ]; then
          SECRETS_STATUS="$SECRETS_STATUS✅ APPLE_DEVELOPER_CERTIFICATE is set\n"
        else
          SECRETS_STATUS="$SECRETS_STATUS❌ APPLE_DEVELOPER_CERTIFICATE is NOT set\n"
        fi
        
        if [ -n "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" ]; then
          SECRETS_STATUS="$SECRETS_STATUS✅ APPLE_DEVELOPER_CERTIFICATE_PASSWORD is set\n"
        else
          SECRETS_STATUS="$SECRETS_STATUS❌ APPLE_DEVELOPER_CERTIFICATE_PASSWORD is NOT set\n"
        fi
        
        if [ -n "${{ secrets.APPLE_PROVISIONING_PROFILE }}" ]; then
          SECRETS_STATUS="$SECRETS_STATUS✅ APPLE_PROVISIONING_PROFILE is set\n"
        else
          SECRETS_STATUS="$SECRETS_STATUS❌ APPLE_PROVISIONING_PROFILE is NOT set\n"
        fi
        
        if [ -n "${{ secrets.APPLE_TEAM_ID }}" ]; then
          SECRETS_STATUS="$SECRETS_STATUS✅ APPLE_TEAM_ID is set\n"
        else
          SECRETS_STATUS="$SECRETS_STATUS❌ APPLE_TEAM_ID is NOT set\n"
        fi
        
        if [ -n "${{ secrets.APPLE_BUNDLE_ID }}" ]; then
          SECRETS_STATUS="$SECRETS_STATUS✅ APPLE_BUNDLE_ID is set\n"
        else
          SECRETS_STATUS="$SECRETS_STATUS❌ APPLE_BUNDLE_ID is NOT set\n"
        fi
        
        if [ -n "${{ secrets.APPLE_PROVISIONING_PROFILE_NAME }}" ]; then
          SECRETS_STATUS="$SECRETS_STATUS✅ APPLE_PROVISIONING_PROFILE_NAME is set\n"
        else
          SECRETS_STATUS="$SECRETS_STATUS❌ APPLE_PROVISIONING_PROFILE_NAME is NOT set\n"
        fi
        
        echo -e "📋 Secrets Status:\n$SECRETS_STATUS"
        
        # Check if we have the minimum required secrets
        if [ -z "${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}" ] || [ -z "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" ] || [ -z "${{ secrets.APPLE_PROVISIONING_PROFILE }}" ]; then
          echo "❌ Missing required secrets for code signing"
          echo "📝 To fix this, you need to:"
          echo "1. Export your iOS Distribution certificate from Keychain Access"
          echo "2. Base64 encode it: base64 -i certificate.p12 | pbcopy"
          echo "3. Add it as APPLE_DEVELOPER_CERTIFICATE secret in GitHub"
          echo "4. Add the certificate password as APPLE_DEVELOPER_CERTIFICATE_PASSWORD"
          echo "5. Export your App Store provisioning profile"
          echo "6. Base64 encode it: base64 -i profile.mobileprovision | pbcopy"
          echo "7. Add it as APPLE_PROVISIONING_PROFILE secret in GitHub"
          exit 1
        fi
        
        echo "✅ All required secrets are present"
        
    - name: Test base64 secrets
      run: |
        echo "🔍 Testing base64 secrets..."
        
        # Test certificate secret
        if [ -n "${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}" ]; then
          echo "📋 Certificate secret is set"
          
          # Test base64 decode and check if it produces valid output
          CERT_DECODED=$(echo "${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}" | base64 --decode 2>/dev/null)
          if [ $? -eq 0 ] && [ -n "$CERT_DECODED" ]; then
            echo "✅ Certificate secret base64 decode test: PASSED"
            echo "📋 Decoded certificate size: $(echo "$CERT_DECODED" | wc -c) bytes"
          else
            echo "❌ Certificate secret base64 decode test: FAILED"
            echo "📋 This suggests the secret might not be properly base64 encoded"
          fi
        else
          echo "❌ Certificate secret is NOT set"
        fi
        
        # Test profile secret
        if [ -n "${{ secrets.APPLE_PROVISIONING_PROFILE }}" ]; then
          echo "📋 Profile secret is set"
          
          # Test base64 decode and check if it produces valid output
          PROFILE_DECODED=$(echo "${{ secrets.APPLE_PROVISIONING_PROFILE }}" | base64 --decode 2>/dev/null)
          if [ $? -eq 0 ] && [ -n "$PROFILE_DECODED" ]; then
            echo "✅ Profile secret base64 decode test: PASSED"
            echo "📋 Decoded profile size: $(echo "$PROFILE_DECODED" | wc -c) bytes"
          else
            echo "❌ Profile secret base64 decode test: FAILED"
            echo "📋 This suggests the secret might not be properly base64 encoded"
          fi
        else
          echo "❌ Profile secret is NOT set"
        fi
        
    - name: Setup code signing for TestFlight
      run: |
        echo "🔐 Setting up code signing for TestFlight deployment"
        
        # Check if secrets are available
        if [ -z "${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}" ]; then
          echo "❌ APPLE_DEVELOPER_CERTIFICATE secret is not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" ]; then
          echo "❌ APPLE_DEVELOPER_CERTIFICATE_PASSWORD secret is not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.APPLE_PROVISIONING_PROFILE }}" ]; then
          echo "❌ APPLE_PROVISIONING_PROFILE secret is not set"
          exit 1
        fi
        
        # Create certificate and provisioning profile with better error handling
        echo "📋 Creating certificate file..."
        echo "${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}" | base64 --decode > /tmp/certificate.p12
        if [ ! -f /tmp/certificate.p12 ] || [ ! -s /tmp/certificate.p12 ]; then
          echo "❌ Failed to create certificate file or file is empty"
          echo "📋 Certificate file size: $(ls -la /tmp/certificate.p12 2>/dev/null || echo 'File not found')"
          echo "📋 Base64 decode exit code: $?"
          exit 1
        fi
        
        echo "✅ Certificate file created successfully"
        echo "📋 Certificate file size: $(ls -la /tmp/certificate.p12)"
        
        # Check if the certificate file is valid
        echo "📋 Validating certificate file..."
        file /tmp/certificate.p12
        if ! file /tmp/certificate.p12 | grep -q "PKCS12"; then
          echo "⚠️ Certificate file doesn't appear to be a valid PKCS12 file"
          echo "📋 File type: $(file /tmp/certificate.p12)"
          echo "📋 First 100 bytes:"
          head -c 100 /tmp/certificate.p12 | hexdump -C
        fi
        
        echo "📋 Creating provisioning profile file..."
        echo "${{ secrets.APPLE_PROVISIONING_PROFILE }}" | base64 --decode > /tmp/profile.mobileprovision
        if [ ! -f /tmp/profile.mobileprovision ] || [ ! -s /tmp/profile.mobileprovision ]; then
          echo "❌ Failed to create provisioning profile file or file is empty"
          echo "📋 Profile file size: $(ls -la /tmp/profile.mobileprovision 2>/dev/null || echo 'File not found')"
          echo "📋 Base64 decode exit code: $?"
          exit 1
        fi
        
        echo "✅ Profile file created successfully"
        echo "📋 Profile file size: $(ls -la /tmp/profile.mobileprovision)"
        
        # Check if the profile file is valid
        echo "📋 Validating provisioning profile file..."
        file /tmp/profile.mobileprovision
        if ! file /tmp/profile.mobileprovision | grep -q "data"; then
          echo "⚠️ Profile file doesn't appear to be valid"
          echo "📋 File type: $(file /tmp/profile.mobileprovision)"
        fi
        
        # Create keychain and import certificate with better error handling
        echo "🔑 Creating build keychain..."
        security create-keychain -p "temp" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "temp" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Import certificate with verbose output and error checking
        echo "📋 Importing certificate..."
        echo "📋 Certificate file exists: $(ls -la /tmp/certificate.p12)"
        echo "📋 Certificate file type: $(file /tmp/certificate.p12)"
        
        # Try to import with more verbose output
        IMPORT_OUTPUT=$(security import /tmp/certificate.p12 -k build.keychain -P "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign 2>&1)
        IMPORT_EXIT_CODE=$?
        
        echo "📋 Import command exit code: $IMPORT_EXIT_CODE"
        echo "📋 Import command output: $IMPORT_OUTPUT"
        
        if [ $IMPORT_EXIT_CODE -ne 0 ]; then
          echo "❌ Failed to import certificate"
          echo "📋 Trying to get more details about the certificate..."
          file /tmp/certificate.p12
          echo "📋 Certificate file first 100 bytes:"
          head -c 100 /tmp/certificate.p12 | hexdump -C
          echo "📋 Keychain status:"
          security list-keychains
          security default-keychain
          echo "📋 Current certificates in build.keychain:"
          security find-identity -v -p codesigning build.keychain || echo "No certificates found"
          exit 1
        fi
        
        echo "✅ Certificate imported successfully"
        security set-key-partition-list -S apple-tool:,apple: -s -k "temp" build.keychain
        
        # Debug: Check certificate import with more details
        echo "📋 Checking certificate import..."
        security list-keychains
        security default-keychain
        echo "📋 Certificates in build.keychain:"
        security find-identity -v -p codesigning build.keychain || echo "No certificates found in build.keychain"
        
        # Debug: Check certificate details with better output
        echo "📋 Certificate details:"
        security find-certificate -a build.keychain | head -10 || echo "No certificates found"
        
        # Install provisioning profile
        echo "📋 Installing provisioning profile..."
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Debug: List installed provisioning profiles
        echo "📋 Installed provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Debug: Show profile details with better parsing
        echo "📋 Profile details:"
        for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "Profile: $profile"
            if [ -f "$profile" ]; then
                echo "Profile content:"
                security cms -D -i "$profile" | grep -E "(Name|TeamName|AppIDName|TeamIdentifier|UUID)" || echo "Could not read profile"
            else
                echo "Profile file not found"
            fi
        done
        
        # Verify the setup
        echo "🔍 Verifying code signing setup..."
        CERT_COUNT=$(security find-identity -v -p codesigning build.keychain | grep -c "valid identities found" || echo "0")
        PROFILE_COUNT=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision 2>/dev/null | wc -l || echo "0")
        
        echo "📋 Found $CERT_COUNT valid certificates"
        echo "📋 Found $PROFILE_COUNT provisioning profiles"
        
        if [ "$CERT_COUNT" -eq 0 ]; then
          echo "❌ No valid certificates found - code signing setup failed"
          exit 1
        fi
        
        if [ "$PROFILE_COUNT" -eq 0 ]; then
          echo "❌ No provisioning profiles found - code signing setup failed"
          exit 1
        fi
        
        echo "✅ Code signing configured for TestFlight"
        
    - name: Export IPA for TestFlight
      run: |
        echo "📦 Exporting IPA for TestFlight deployment"
        
        # Get the actual certificate name from the keychain
        echo "🔍 Detecting certificate name..."
        CERT_NAME=$(security find-identity -v -p codesigning build.keychain | grep "iPhone Distribution" | head -1 | sed 's/.*"\(.*\)".*/\1/' || echo "")
        
        if [ -z "$CERT_NAME" ]; then
          echo "⚠️ No iPhone Distribution certificate found, trying alternative names..."
          CERT_NAME=$(security find-identity -v -p codesigning build.keychain | grep -E "(Distribution|Developer)" | head -1 | sed 's/.*"\(.*\)".*/\1/' || echo "")
        fi
        
        if [ -z "$CERT_NAME" ]; then
          echo "⚠️ No certificates found in build.keychain, trying system keychain..."
          CERT_NAME=$(security find-identity -v -p codesigning | grep "iPhone Distribution" | head -1 | sed 's/.*"\(.*\)".*/\1/' || echo "iPhone Distribution")
        fi
        
        echo "📋 Using certificate: $CERT_NAME"
        
        # Get the actual provisioning profile name
        echo "🔍 Detecting provisioning profile name..."
        PROFILE_NAME=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | grep -A1 "<key>Name</key>" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/' || echo "${{ secrets.APPLE_PROVISIONING_PROFILE_NAME }}")
        echo "📋 Using profile: $PROFILE_NAME"
        
        # Create ExportOptions.plist for TestFlight
        echo '<?xml version="1.0" encoding="UTF-8"?>' > ExportOptions.plist
        echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> ExportOptions.plist
        echo '<plist version="1.0">' >> ExportOptions.plist
        echo '<dict>' >> ExportOptions.plist
        echo '    <key>method</key>' >> ExportOptions.plist
        echo '    <string>app-store</string>' >> ExportOptions.plist
        echo '    <key>teamID</key>' >> ExportOptions.plist
        echo '    <string>${{ secrets.APPLE_TEAM_ID }}</string>' >> ExportOptions.plist
        echo '    <key>signingStyle</key>' >> ExportOptions.plist
        echo '    <string>manual</string>' >> ExportOptions.plist
        echo '    <key>provisioningProfiles</key>' >> ExportOptions.plist
        echo '    <dict>' >> ExportOptions.plist
        echo '        <key>com.cosmos.guras</key>' >> ExportOptions.plist
        echo "        <string>$PROFILE_NAME</string>" >> ExportOptions.plist
        echo '    </dict>' >> ExportOptions.plist
        echo '    <key>signingCertificate</key>' >> ExportOptions.plist
        echo "    <string>$CERT_NAME</string>" >> ExportOptions.plist
        echo '    <key>uploadBitcode</key>' >> ExportOptions.plist
        echo '    <false/>' >> ExportOptions.plist
        echo '    <key>uploadSymbols</key>' >> ExportOptions.plist
        echo '    <true/>' >> ExportOptions.plist
        echo '</dict>' >> ExportOptions.plist
        echo '</plist>' >> ExportOptions.plist
        
        # Debug: Show exportOptions.plist content
        echo "📋 ExportOptions.plist content:"
        cat ExportOptions.plist
        
        # Debug: Show the profile name being used
        echo "📋 Profile name from secret: ${{ secrets.APPLE_PROVISIONING_PROFILE_NAME }}"
        echo "📋 Detected profile name: $PROFILE_NAME"
        
        # Debug: Show bundle ID being used
        echo "📋 Bundle ID from Xcode project: com.cosmos.guras"
        
        # Debug: Show team ID being used
        echo "📋 Team ID from secret: ${{ secrets.APPLE_TEAM_ID }}"
        
        # Debug: List available certificates
        echo "📋 Available certificates:"
        security find-identity -v -p codesigning
        
        # Debug: List installed provisioning profiles with details
        echo "📋 Installed provisioning profiles:"
        for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "Profile: $profile"
            security cms -D -i "$profile" | grep -E "(Name|TeamName|AppIDName|TeamIdentifier)" || echo "Could not read profile"
        done
        
        # Check if archive exists using workspace root path
        ARCHIVE_PATH="$GITHUB_WORKSPACE/artifacts/ios/build/Guras.xcarchive"
        if [ ! -d "$ARCHIVE_PATH" ]; then
          echo "❌ Archive not found at $ARCHIVE_PATH"
          echo "📋 Available files in artifacts:"
          find "$GITHUB_WORKSPACE/artifacts" -type f -name "*.xcarchive" || echo "No archives found"
          echo "📋 Looking for xcarchive directories:"
          find "$GITHUB_WORKSPACE/artifacts" -type d -name "*.xcarchive" || echo "No archive directories found"
          echo "📋 Artifacts directory structure:"
          find "$GITHUB_WORKSPACE/artifacts" -type f | head -20
          exit 1
        fi
        
        echo "✅ Archive found at: $ARCHIVE_PATH"
        
        # Export IPA from archive with error handling
        echo "📦 Exporting IPA..."
        if ! xcodebuild -exportArchive -archivePath "$ARCHIVE_PATH" -exportPath ./build -exportOptionsPlist ExportOptions.plist; then
          echo "❌ Export failed"
          echo "📋 Checking export logs..."
          if [ -f "./build/ExportOptions.plist" ]; then
            echo "📋 ExportOptions.plist was created in build directory"
          fi
          if [ -d "./build" ]; then
            echo "📋 Build directory contents:"
            ls -la ./build/
          fi
          exit 1
        fi
        
        # Verify IPA was created
        if [ ! -f "./build/Guras.ipa" ]; then
          echo "❌ IPA file not found after export"
          echo "📋 Build directory contents:"
          ls -la ./build/
          exit 1
        fi
        
        echo "✅ IPA exported successfully: ./build/Guras.ipa"
        echo "📋 IPA file size: $(ls -la ./build/Guras.ipa)"
        
        # Verify the bundle identifier in the IPA
        echo "🔍 Verifying bundle identifier in IPA..."
        mkdir -p /tmp/ipa-extract
        unzip -q ./build/Guras.ipa -d /tmp/ipa-extract
        if [ -f "/tmp/ipa-extract/Payload/Guras.app/Info.plist" ]; then
          BUNDLE_ID=$(plutil -extract CFBundleIdentifier raw /tmp/ipa-extract/Payload/Guras.app/Info.plist)
          echo "📋 Bundle identifier in IPA: $BUNDLE_ID"
          if [ "$BUNDLE_ID" != "com.cosmos.guras" ]; then
            echo "❌ Bundle identifier mismatch! Expected: com.cosmos.guras, Found: $BUNDLE_ID"
            exit 1
          else
            echo "✅ Bundle identifier matches expected value"
          fi
        else
          echo "⚠️ Could not extract bundle identifier from IPA"
        fi
        rm -rf /tmp/ipa-extract
        
    - name: Upload to TestFlight
      run: |
        echo "📱 Uploading to TestFlight..."
        echo "Version: ${{ needs.build.outputs.version }}"
        echo "IPA Path: ./build/Guras.ipa"
        echo "Bundle ID: com.cosmos.guras"
        
        # Check if IPA exists
        if [ ! -f "./build/Guras.ipa" ]; then
          echo "❌ IPA file not found at ./build/Guras.ipa"
          echo "📋 Current directory: $(pwd)"
          echo "📋 Build directory contents:"
          ls -la ./build/ || echo "Build directory not found"
          exit 1
        fi
        
        echo "✅ IPA file found: $(ls -la ./build/Guras.ipa)"
        
        # Verify app exists in App Store Connect
        echo "🔍 Verifying app exists in App Store Connect..."
        echo "📋 Bundle ID: com.cosmos.guras"
        echo "📋 Apple ID: ${{ secrets.APPLE_ID }}"
        echo "📋 Note: If this fails, you need to create the app in App Store Connect first"
        echo "📋 Go to: https://appstoreconnect.apple.com"
        echo "📋 Create a new iOS app with bundle ID: com.cosmos.guras"
        
        # Test Apple ID authentication and app access
        echo "🔐 Testing Apple ID authentication..."
        if ! xcrun altool --list-providers -u "${{ secrets.APPLE_ID }}" -p "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" > /dev/null 2>&1; then
          echo "❌ Apple ID authentication failed"
          echo "📋 Please verify:"
          echo "   - APPLE_ID secret is correct"
          echo "   - APPLE_APP_SPECIFIC_PASSWORD secret is correct"
          echo "   - App-specific password is valid and not expired"
          exit 1
        else
          echo "✅ Apple ID authentication successful"
        fi
        
        # Try to list apps to verify access
        echo "📱 Testing app access..."
        if ! xcrun altool --list-apps -u "${{ secrets.APPLE_ID }}" -p "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" 2>/dev/null | grep -q "com.cosmos.guras"; then
          echo "⚠️ App 'com.cosmos.guras' not found in your App Store Connect account"
          echo "📋 This could mean:"
          echo "   1. The app doesn't exist in App Store Connect"
          echo "   2. Your Apple ID doesn't have access to this app"
          echo "   3. The bundle identifier is different"
          echo "📋 Please create the app in App Store Connect first"
          echo "📋 Go to: https://appstoreconnect.apple.com"
          echo "📋 Create a new iOS app with bundle ID: com.cosmos.guras"
        else
          echo "✅ App 'com.cosmos.guras' found in App Store Connect"
        fi
        
        # Upload to App Store Connect using xcrun altool
        xcrun altool --upload-app \
                     --type ios \
                     --file ./build/Guras.ipa \
                     --username "${{ secrets.APPLE_ID }}" \
                     --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
                     --verbose
        
        echo "✅ IPA uploaded to TestFlight successfully"
        
    - name: TestFlight Deployment Summary
      run: |
        echo "🎉 ========================================="
        echo "✅ TestFlight deployment completed successfully!"
        echo "📦 Version: ${{ needs.build.outputs.version }}"
        echo "📱 IPA: Uploaded to TestFlight"
        echo "📝 Note: Check App Store Connect for processing status"
        echo "🎉 ========================================="

  deploy-appstore:
    name: Deploy to App Store
    runs-on: macos-latest
    needs: [build, deploy-testflight]
    if: success()
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ios-build-v${{ needs.build.outputs.version }}
        path: ./artifacts
        
    - name: Setup code signing
      run: |
        echo "🔐 Setting up code signing for App Store deployment..."
        
        # Create keychain
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings build.keychain
        
        # Import certificate
        echo "📋 Importing distribution certificate..."
        echo "${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}" | base64 --decode > /tmp/certificate.p12
        
        # Check certificate file
        if [ ! -s /tmp/certificate.p12 ]; then
          echo "❌ Certificate file is empty or missing"
          exit 1
        fi
        
        # Import certificate into keychain
        security import /tmp/certificate.p12 -k build.keychain -P "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
        
        # Install provisioning profile
        echo "📋 Installing App Store provisioning profile..."
        echo "${{ secrets.APPLE_PROVISIONING_PROFILE }}" | base64 --decode > /tmp/profile.mobileprovision
        
        if [ ! -s /tmp/profile.mobileprovision ]; then
          echo "❌ Provisioning profile file is empty or missing"
          exit 1
        fi
        
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Get the actual profile name from the installed profile
        echo "🔍 Detecting installed provisioning profile name..."
        PROFILE_NAME=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | grep -A1 "<key>Name</key>" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
        
        if [ -z "$PROFILE_NAME" ]; then
          echo "⚠️ Could not detect profile name, using secret value..."
          PROFILE_NAME="${{ secrets.APPLE_PROVISIONING_PROFILE_NAME }}"
        fi
        
        echo "📋 Detected profile name: $PROFILE_NAME"
        
        # Verify certificate and profile
        echo "🔍 Verifying code signing setup..."
        security find-identity -v -p codesigning build.keychain
        
        echo "✅ Code signing setup completed"
        
    - name: Export IPA for App Store
      run: |
        echo "📦 Exporting IPA for App Store deployment..."
        
        # Set up environment
        export DEVELOPER_DIR="/Applications/Xcode_16.2.app/Contents/Developer"
        export PATH="$DEVELOPER_DIR/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin"
        
        # Bump version for App Store deployment
        echo "📱 Bumping version for App Store deployment..."
        CURRENT_BUILD="${{ needs.build.outputs.build_number }}"
        APP_STORE_BUILD=$((CURRENT_BUILD + 1))
        
        echo "📋 TestFlight build number: $CURRENT_BUILD"
        echo "📋 App Store build number: $APP_STORE_BUILD"
        
        # Update the Xcode project with the new build number
        sed -i '' "s/CURRENT_PROJECT_VERSION = [0-9]*;/CURRENT_PROJECT_VERSION = $APP_STORE_BUILD;/g" artifacts/ios/Guras.xcodeproj/project.pbxproj
        
        echo "📋 Updated build number in Xcode project:"
        grep "CURRENT_PROJECT_VERSION" artifacts/ios/Guras.xcodeproj/project.pbxproj
        
        # Detect certificate name
        echo "🔍 Detecting certificate name..."
        CERT_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Apple Distribution" | head -1 | sed 's/.*"\(.*\)".*/\1/')
        
        if [ -z "$CERT_NAME" ]; then
          echo "⚠️ No Apple Distribution certificate found, trying alternative names..."
          CERT_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Distribution" | head -1 | sed 's/.*"\(.*\)".*/\1/')
        fi
        
        if [ -z "$CERT_NAME" ]; then
          echo "❌ No distribution certificate found"
          security find-identity -v -p codesigning build.keychain
          exit 1
        fi
        
        echo "📋 Using certificate: $CERT_NAME"
        
        # Get the actual provisioning profile name from the installed profile
        echo "🔍 Detecting provisioning profile name..."
        PROFILE_NAME=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | grep -A1 "<key>Name</key>" | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
        
        if [ -z "$PROFILE_NAME" ]; then
          echo "⚠️ Could not detect profile name, using secret value..."
          PROFILE_NAME="${{ secrets.APPLE_PROVISIONING_PROFILE_NAME }}"
        fi
        
        echo "📋 Using profile: $PROFILE_NAME"
        
        # Debug: List all installed profiles
        echo "📋 All installed provisioning profiles:"
        for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            if [ -f "$profile" ]; then
                echo "Profile: $profile"
                security cms -D -i "$profile" | grep -E "(Name|TeamName|AppIDName|TeamIdentifier)" || echo "Could not read profile"
            fi
        done
        
        # Create ExportOptions.plist for App Store
        echo "📋 Creating ExportOptions.plist for App Store..."
        echo '<?xml version="1.0" encoding="UTF-8"?>' > ExportOptions.plist
        echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> ExportOptions.plist
        echo '<plist version="1.0">' >> ExportOptions.plist
        echo '<dict>' >> ExportOptions.plist
        echo '    <key>method</key>' >> ExportOptions.plist
        echo '    <string>app-store</string>' >> ExportOptions.plist
        echo '    <key>teamID</key>' >> ExportOptions.plist
        echo "    <string>${{ secrets.APPLE_TEAM_ID }}</string>" >> ExportOptions.plist
        echo '    <key>signingStyle</key>' >> ExportOptions.plist
        echo '    <string>manual</string>' >> ExportOptions.plist
        echo '    <key>provisioningProfiles</key>' >> ExportOptions.plist
        echo '    <dict>' >> ExportOptions.plist
        echo '        <key>com.cosmos.guras</key>' >> ExportOptions.plist
        echo "        <string>$PROFILE_NAME</string>" >> ExportOptions.plist
        echo '    </dict>' >> ExportOptions.plist
        echo '    <key>signingCertificate</key>' >> ExportOptions.plist
        echo "    <string>$CERT_NAME</string>" >> ExportOptions.plist
        echo '    <key>uploadBitcode</key>' >> ExportOptions.plist
        echo '    <false/>' >> ExportOptions.plist
        echo '    <key>uploadSymbols</key>' >> ExportOptions.plist
        echo '    <true/>' >> ExportOptions.plist
        echo '</dict>' >> ExportOptions.plist
        echo '</plist>' >> ExportOptions.plist
        
        echo "📋 ExportOptions.plist content:"
        cat ExportOptions.plist
        
        # Find the archive
        ARCHIVE_PATH="$GITHUB_WORKSPACE/artifacts/ios/build/Guras.xcarchive"
        if [ ! -d "$ARCHIVE_PATH" ]; then
          echo "❌ Archive not found at $ARCHIVE_PATH"
          find "$GITHUB_WORKSPACE/artifacts" -type d -name "*.xcarchive" || echo "No archives found"
          exit 1
        fi
        
        echo "✅ Archive found at: $ARCHIVE_PATH"
        
        # Export IPA
        echo "📦 Exporting IPA for App Store..."
        xcodebuild -exportArchive \
                   -archivePath "$ARCHIVE_PATH" \
                   -exportPath ./build \
                   -exportOptionsPlist ExportOptions.plist
        
        if [ ! -f "./build/Guras.ipa" ]; then
          echo "❌ IPA export failed"
          ls -la ./build/ || echo "Build directory not found"
          exit 1
        fi
        
        echo "✅ IPA exported successfully: ./build/Guras.ipa"
        echo "📋 IPA file size: $(ls -la ./build/Guras.ipa)"
        echo "📋 App Store build number: $APP_STORE_BUILD"
        
    - name: Upload to App Store Connect
      run: |
        echo "🏪 Uploading to App Store Connect for review..."
        echo "Version: ${{ needs.build.outputs.version }}"
        echo "IPA Path: ./build/Guras.ipa"
        
        # Verify IPA exists
        if [ ! -f "./build/Guras.ipa" ]; then
          echo "❌ IPA file not found"
          exit 1
        fi
        
        echo "✅ IPA file found: $(ls -la ./build/Guras.ipa)"
        
        # Verify app exists in App Store Connect
        echo "🔍 Verifying app exists in App Store Connect..."
        if ! xcrun altool --list-apps -u "${{ secrets.APPLE_ID }}" -p "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" 2>/dev/null | grep -q "com.cosmos.guras"; then
          echo "❌ App 'com.cosmos.guras' not found in App Store Connect"
          echo "📋 Please ensure the app exists in App Store Connect"
          exit 1
        fi
        
        echo "✅ App found in App Store Connect"
        
        # Upload to App Store Connect
        echo "📤 Uploading to App Store Connect..."
        xcrun altool --upload-app \
                     --type ios \
                     --file ./build/Guras.ipa \
                     --username "${{ secrets.APPLE_ID }}" \
                     --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
                     --verbose
        
        if [ $? -eq 0 ]; then
          echo "✅ App uploaded to App Store Connect successfully"
          echo "📝 Next steps:"
          echo "   1. Go to App Store Connect: https://appstoreconnect.apple.com"
          echo "   2. Navigate to your app"
          echo "   3. Go to 'TestFlight' tab to see the uploaded build"
          echo "   4. Submit for App Store review when ready"
        else
          echo "❌ Upload failed"
          exit 1
        fi
        
    - name: App Store Deployment Summary
      run: |
        echo "🎉 ========================================="
        echo "✅ App Store deployment completed successfully!"
        echo "📦 Version: ${{ needs.build.outputs.version }}"
        echo "📱 IPA: Uploaded to App Store Connect"
        echo "📝 Status: Ready for App Store review"
        echo "🔗 Next: Submit for review in App Store Connect"
        echo "🎉 =========================================" 