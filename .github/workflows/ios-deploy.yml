name: iOS Deploy to App Store

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Select version to deploy'
        required: true
        type: string
        default: 'latest'
      environment:
        description: 'Deployment environment'
        required: true
        default: 'testflight'
        type: choice
        options:
        - testflight
        - app-store

jobs:
  deploy:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.version_tag }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: react-native/package-lock.json
        
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        
    - name: Install dependencies
      working-directory: ./react-native
      run: |
        npm ci
        
    - name: Install iOS dependencies
      working-directory: ./react-native/ios
      run: |
        pod install
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Build and Archive
      working-directory: ./react-native/ios
      run: |
        xcodebuild -workspace Guras.xcworkspace \
                   -scheme Guras \
                   -configuration Release \
                   -destination generic/platform=iOS \
                   -archivePath ./build/Guras.xcarchive \
                   clean archive
                   
    - name: Export IPA
      working-directory: ./react-native/ios
      run: |
        xcodebuild -exportArchive \
                   -archivePath ./build/Guras.xcarchive \
                   -exportPath ./build/ipa \
                   -exportOptionsPlist exportOptions.plist
                   
    - name: Upload to TestFlight
      if: ${{ github.event.inputs.environment == 'testflight' }}
      run: |
        echo "üì± Uploading to TestFlight..."
        # For now, just create a placeholder - you'll need to set up App Store Connect API
        echo "‚úÖ TestFlight upload would happen here with proper API setup"
        
    - name: Upload to App Store
      if: ${{ github.event.inputs.environment == 'app-store' }}
      run: |
        echo "üè™ Uploading to App Store..."
        # For now, just create a placeholder - you'll need to set up App Store Connect API
        echo "‚úÖ App Store upload would happen here with proper API setup"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-ipa-${{ github.event.inputs.version_tag }}
        path: react-native/ios/build/ipa/
        retention-days: 30
        
    - name: Deployment Summary
      run: |
        echo "üöÄ Deployment completed!"
        echo "Version: ${{ github.event.inputs.version_tag }}"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "IPA: Available in artifacts"
        echo ""
        echo "üìù Note: To enable actual App Store uploads, you need to:"
        echo "1. Set up App Store Connect API credentials"
        echo "2. Add secrets: APP_STORE_CONNECT_API_KEY, APP_STORE_CONNECT_API_KEY_ID, APP_STORE_CONNECT_ISSUER_ID"
        echo "3. Update the upload steps with proper API calls" 