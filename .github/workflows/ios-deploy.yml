name: iOS Deploy to App Store

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Select version to deploy (e.g., v1.0.1, v1.0.2)'
        required: true
        type: string
        default: 'v1.0.1'
      environment:
        description: 'Deployment environment'
        required: true
        default: 'testflight'
        type: choice
        options:
        - testflight
        - app-store

jobs:
  deploy:
    name: iOS Deploy ${{ github.event.inputs.version_tag }} to ${{ github.event.inputs.environment }}
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.version_tag }}
        
    - name: Validate version tag
      run: |
        VERSION_TAG="${{ github.event.inputs.version_tag }}"
        echo "📦 Deploying version: $VERSION_TAG"
        
        # Check if the tag exists
        if ! git tag | grep -q "^$VERSION_TAG$"; then
          echo "❌ Error: Tag '$VERSION_TAG' does not exist!"
          echo "Available tags:"
          git tag | sort -V
          exit 1
        fi
        
        echo "✅ Tag '$VERSION_TAG' found and validated"
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ios-build-${{ github.event.inputs.version_tag }}
        path: ./react-native/
        
    - name: Verify artifacts
      run: |
        echo "🔍 Verifying downloaded artifacts for ${{ github.event.inputs.version_tag }}"
        
        # Check if archive exists
        if [ -d "./react-native/ios/build/Guras.xcarchive" ]; then
          echo "✅ Archive found: ./react-native/ios/build/Guras.xcarchive"
        else
          echo "❌ Error: Archive not found!"
          echo "Available files:"
          find ./react-native -name "*.xcarchive" -o -name "*.ipa" 2>/dev/null || echo "No archives found"
          exit 1
        fi
        
        # Check if IPA exists
        if [ -d "./react-native/ios/build/ipa" ]; then
          echo "✅ IPA directory found: ./react-native/ios/build/ipa"
          ls -la ./react-native/ios/build/ipa/
        else
          echo "❌ Error: IPA directory not found!"
          exit 1
        fi
        
    - name: Upload to TestFlight
      if: ${{ github.event.inputs.environment == 'testflight' }}
      run: |
        echo "📱 Uploading to TestFlight..."
        echo "Version: ${{ github.event.inputs.version_tag }}"
        echo "IPA Path: ./react-native/ios/build/ipa/"
        # For now, just create a placeholder - you'll need to set up App Store Connect API
        echo "✅ TestFlight upload would happen here with proper API setup"
        echo "📦 Using pre-built IPA from build artifacts"
        
    - name: Upload to App Store
      if: ${{ github.event.inputs.environment == 'app-store' }}
      run: |
        echo "🏪 Uploading to App Store..."
        echo "Version: ${{ github.event.inputs.version_tag }}"
        echo "IPA Path: ./react-native/ios/build/ipa/"
        # For now, just create a placeholder - you'll need to set up App Store Connect API
        echo "✅ App Store upload would happen here with proper API setup"
        echo "📦 Using pre-built IPA from build artifacts"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-deploy-${{ github.event.inputs.version_tag }}
        path: react-native/ios/build/ipa/
        retention-days: 30
        
    - name: Deployment Summary
      run: |
        echo "🎉 ========================================="
        echo "🚀 Deployment completed successfully!"
        echo "📦 Version: ${{ github.event.inputs.version_tag }}"
        echo "🌍 Environment: ${{ github.event.inputs.environment }}"
        echo "📱 IPA: Available in artifacts"
        echo "📦 Artifact: ios-deploy-${{ github.event.inputs.version_tag }}"
        echo "🎉 ========================================="
        echo ""
        echo "📝 Note: To enable actual App Store uploads, you need to:"
        echo "1. Set up App Store Connect API credentials"
        echo "2. Add secrets: APP_STORE_CONNECT_API_KEY, APP_STORE_CONNECT_API_KEY_ID, APP_STORE_CONNECT_ISSUER_ID"
        echo "3. Update the upload steps with proper API calls" 