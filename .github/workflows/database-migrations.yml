name: Database Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run migrations against'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      dry_run:
        description: 'Dry run (validate only)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: "us-east-1"

jobs:
  run-migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Update GitHub IPs for RDS Access
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "Ensuring GitHub Actions can access RDS..."
        
        # Trigger the IP update workflow
        gh workflow run update-github-ips.yml --ref ${{ github.ref }}
        
        # Wait a moment for the workflow to start
        sleep 10
        
        echo "‚úÖ GitHub IPs update workflow triggered"
        
    - name: Get database connection details
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        echo "Getting database connection details for $ENVIRONMENT environment..."
        
        # Get database details from AWS Secrets Manager
        DB_SECRET=$(aws secretsmanager get-secret-value \
          --secret-id "guras-$ENVIRONMENT-db-connection" \
          --region ${{ env.AWS_REGION }} \
          --query 'SecretString' \
          --output text)
        
        # Parse the JSON secret
        DB_HOST=$(echo "$DB_SECRET" | jq -r '.ServerName')
        DB_PORT=$(echo "$DB_SECRET" | jq -r '.Port')
        DB_NAME=$(echo "$DB_SECRET" | jq -r '.DatabaseName')
        DB_USER=$(echo "$DB_SECRET" | jq -r '.Username')
        DB_PASSWORD=$(echo "$DB_SECRET" | jq -r '.Password')
        
        echo "Database connection details retrieved:"
        echo "Host: $DB_HOST"
        echo "Port: $DB_PORT"
        echo "Database: $DB_NAME"
        echo "User: $DB_USER"
        
        # Set environment variables for Flyway
        echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
        echo "DB_PORT=$DB_PORT" >> $GITHUB_ENV
        echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
        echo "DB_USER=$DB_USER" >> $GITHUB_ENV
        echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
        
    - name: Setup Flyway
      run: |
        echo "Setting up Flyway..."
        
        # Download Flyway
        wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.22.3/flyway-commandline-9.22.3-linux-x64.tar.gz | tar -xz
        
        # Add Flyway to PATH
        echo "$PWD/flyway-9.22.3" >> $GITHUB_PATH
        
        # Verify Flyway installation
        flyway --version
        
    - name: Run database migrations
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        DRY_RUN="${{ github.event.inputs.dry_run || false }}"
        
        echo "Running database migrations for $ENVIRONMENT environment..."
        
        if [ "$DRY_RUN" = "true" ]; then
          echo "üîç DRY RUN MODE - Validating migrations only"
          flyway validate \
            -url="jdbc:postgresql://${{ env.DB_HOST }}:${{ env.DB_PORT }}/${{ env.DB_NAME }}" \
            -user="${{ env.DB_USER }}" \
            -password="${{ env.DB_PASSWORD }}" \
            -locations="filesystem:database/migrations"
        else
          echo "üöÄ Running actual migrations..."
          flyway migrate \
            -url="jdbc:postgresql://${{ env.DB_HOST }}:${{ env.DB_PORT }}/${{ env.DB_NAME }}" \
            -user="${{ env.DB_USER }}" \
            -password="${{ env.DB_PASSWORD }}" \
            -locations="filesystem:database/migrations"
        fi
        
        echo "‚úÖ Database migrations completed successfully!"


