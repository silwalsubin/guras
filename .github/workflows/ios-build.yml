name: iOS Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    name: iOS Build & Version
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: react-native/package-lock.json
        
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        
    - name: Generate version
      id: version
      run: |
        # Get the latest build number from existing tags
        LATEST_BUILD=$(git tag | grep '^v1\.0\.' | sort -V | tail -n 1 | sed 's/v1\.0\.//' || echo "0")
        
        # Increment build number
        NEW_BUILD=$((LATEST_BUILD + 1))
        
        # Generate version: 1.0.BUILD_NUMBER
        VERSION="1.0.${NEW_BUILD}"
        
        echo "Latest build number: $LATEST_BUILD"
        echo "New build number: $NEW_BUILD"
        echo "Generated version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Update version in app.json
      working-directory: ./react-native
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Update version in app.json
        node -e "
          const fs = require('fs');
          const appJson = JSON.parse(fs.readFileSync('app.json', 'utf8'));
          appJson.version = '$VERSION';
          fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2));
        "
        
    - name: Install dependencies
      working-directory: ./react-native
      run: |
        echo "📦 Installing dependencies for version ${{ steps.version.outputs.version }}"
        npm ci
        
    - name: Install iOS dependencies
      working-directory: ./react-native/ios
      run: |
        echo "🍎 Installing iOS dependencies for version ${{ steps.version.outputs.version }}"
        pod install
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Validate project structure
      working-directory: ./react-native/ios
      run: |
        echo "🔍 Validating project structure for version ${{ steps.version.outputs.version }}"
        xcodebuild -workspace Guras.xcworkspace \
                   -scheme Guras \
                   -configuration Debug \
                   clean
        
    - name: Build JavaScript bundle
      working-directory: ./react-native
      run: |
        echo "📱 Building JavaScript bundle for version ${{ steps.version.outputs.version }}"
        npx react-native bundle --platform ios --dev false --entry-file index.js --bundle-output ios/main.jsbundle --assets-dest ios
        
    - name: Create and push tag
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "🏷️ Creating tag v$VERSION"
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add and commit version changes
        git add react-native/app.json
        git commit -m "Bump version to $VERSION" || echo "No changes to commit"
        
        # Create tag
        git tag "v$VERSION"
        
        # Push changes and tag
        git push origin master
        git push origin "v$VERSION"
        
        echo "✅ Created and pushed tag: v$VERSION"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-v${{ steps.version.outputs.version }}
        path: |
          react-native/ios/main.jsbundle
          react-native/app.json
        retention-days: 7
        
    - name: Build Summary
      run: |
        echo "🎉 ========================================="
        echo "✅ Build completed successfully!"
        echo "📦 Version: ${{ steps.version.outputs.version }}"
        echo "🏷️ Tag: v${{ steps.version.outputs.version }}"
        echo "📱 Bundle: Available in artifacts"
        echo "📦 Artifact: ios-build-v${{ steps.version.outputs.version }}"
        echo "🎉 =========================================" 