name: Run Unit Tests

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: guras_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Java for Flyway
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Install Flyway
      run: |
        # Set Flyway version
        FLYWAY_VERSION="9.22.3"
        
        # Download Flyway with proper error handling
        echo "Downloading Flyway ${FLYWAY_VERSION}..."
        curl -L -o flyway.tar.gz "https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/${FLYWAY_VERSION}/flyway-commandline-${FLYWAY_VERSION}.tar.gz"
        
        # Verify download was successful
        if [ ! -f flyway.tar.gz ] || [ ! -s flyway.tar.gz ]; then
          echo "Failed to download Flyway"
          echo "File size: $(stat -c%s flyway.tar.gz 2>/dev/null || echo 'unknown')"
          echo "File type: $(file flyway.tar.gz 2>/dev/null || echo 'unknown')"
          exit 1
        fi
        
        # Check file size (should be reasonable for Flyway)
        FILE_SIZE=$(stat -c%s flyway.tar.gz)
        if [ "$FILE_SIZE" -lt 1000 ]; then
          echo "Downloaded file is too small (${FILE_SIZE} bytes). It might be an error page."
          echo "File contents:"
          head -5 flyway.tar.gz
          exit 1
        fi
        
        echo "Download successful (${FILE_SIZE} bytes)"
        
        # Extract with verbose output for debugging
        echo "Extracting Flyway..."
        tar -xzf flyway.tar.gz
        
        # Find the extracted directory
        FLYWAY_DIR=$(find . -name "flyway-*" -type d | head -1)
        if [ -z "$FLYWAY_DIR" ]; then
          echo "Could not find Flyway directory after extraction"
          echo "Contents of current directory:"
          ls -la
          exit 1
        fi
        
        echo "Found Flyway directory: ${FLYWAY_DIR}"
        
        # Debug: Show directory structure
        echo "Directory contents:"
        ls -la "${FLYWAY_DIR}"
        echo "Looking for JAR files:"
        find "${FLYWAY_DIR}" -name "*.jar" | head -10
        echo "Contents of lib directory:"
        ls -la "${FLYWAY_DIR}/lib/"
        echo "Contents of jars directory:"
        ls -la "${FLYWAY_DIR}/jars/"
        
        # Install Flyway to /opt/flyway (keep all files together)
        sudo mkdir -p /opt/flyway
        sudo cp -r "${FLYWAY_DIR}"/* /opt/flyway/
        sudo chmod +x /opt/flyway/flyway
        
        # Debug: Show installed structure
        echo "Installed structure:"
        ls -la /opt/flyway/
        echo "JAR files in installation:"
        find /opt/flyway -name "*.jar" | head -10
        
        # Create a wrapper script that sets the correct classpath
        echo '#!/bin/bash' | sudo tee /usr/local/bin/flyway > /dev/null
        echo 'export FLYWAY_HOME="/opt/flyway"' | sudo tee -a /usr/local/bin/flyway > /dev/null
        echo 'export CLASSPATH="$FLYWAY_HOME/jars/*:$FLYWAY_HOME/lib/*:$FLYWAY_HOME/drivers/*:$FLYWAY_HOME/*.jar"' | sudo tee -a /usr/local/bin/flyway > /dev/null
        echo 'echo "FLYWAY_HOME: $FLYWAY_HOME"' | sudo tee -a /usr/local/bin/flyway > /dev/null
        echo 'echo "CLASSPATH: $CLASSPATH"' | sudo tee -a /usr/local/bin/flyway > /dev/null
        echo 'echo "Available JAR files:"' | sudo tee -a /usr/local/bin/flyway > /dev/null
        echo 'find "$FLYWAY_HOME" -name "*.jar" | head -5' | sudo tee -a /usr/local/bin/flyway > /dev/null
        echo 'exec java -cp "$CLASSPATH" org.flywaydb.commandline.Main "$@"' | sudo tee -a /usr/local/bin/flyway > /dev/null
        
        sudo chmod +x /usr/local/bin/flyway
        
        # Verify installation
        echo "Verifying installation..."
        flyway -version
        
        # Clean up download
        rm -rf flyway.tar.gz flyway-*
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
    
    - name: Run Flyway Migrations
      run: |
        cd server
        flyway -url=jdbc:postgresql://localhost:5432/guras_test -user=postgres -password=postgres -locations=filesystem:../database/migrations migrate
    
    - name: Restore dependencies
      run: |
        cd server
        dotnet restore
    
    - name: Build
      run: |
        cd server
        dotnet build --no-restore
    
    - name: Test
      run: |
        cd server
        dotnet test --no-build --verbosity normal --logger "console;verbosity=detailed"
