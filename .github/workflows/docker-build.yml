name: Build and Push Docker Image to ECR

on:
  push:
    branches: [ master ]
    paths:
      - 'server/**'
  pull_request:
    branches: [ master ]
    paths:
      - 'server/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      image_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
        type: string

env:
  AWS_REGION: us-east-1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate version
      id: version
      run: |
        # Get the latest build number from existing tags (check both v1.0.n and 1.0.n formats)
        LATEST_BUILD_V=$(git tag | grep '^v1\.0\.' | sort -V | tail -n 1 | sed 's/^v1\.0\.//' || echo "0")
        LATEST_BUILD_NO_V=$(git tag | grep '^1\.0\.' | sort -V | tail -n 1 | sed 's/^1\.0\.//' || echo "0")
        
        # Find the highest build number between the two formats
        if [ "$LATEST_BUILD_V" -gt "$LATEST_BUILD_NO_V" ]; then
          LATEST_BUILD=$LATEST_BUILD_V
        else
          LATEST_BUILD=$LATEST_BUILD_NO_V
        fi
        
        # Start with 1.0.1 if no previous 1.0.x tags exist
        if [ "$LATEST_BUILD" -eq 0 ]; then
          LATEST_BUILD=0
          echo "📋 Starting new 1.0.x version series"
        fi
        
        # Increment build number
        NEW_BUILD=$((LATEST_BUILD + 1))
        
        # Generate version: 1.0.BUILD_NUMBER
        VERSION="1.0.${NEW_BUILD}"
        
        echo "Latest build number from v1.0.n tags: $LATEST_BUILD_V"
        echo "Latest build number from 1.0.n tags: $LATEST_BUILD_NO_V"
        echo "Using highest build number: $LATEST_BUILD"
        echo "New build number: $NEW_BUILD"
        echo "Generated version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_number=$NEW_BUILD" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create Firebase Admin SDK JSON
      run: |
        echo '${{ secrets.FIREBASE_ADMIN_SDK_JSON }}' > server/apis/guras-firebase-adminsdk.json
        echo "✅ Firebase Admin SDK JSON file created successfully"
        echo "📋 File size: $(wc -c < server/apis/guras-firebase-adminsdk.json) bytes"

    - name: Update appsettings with OpenAI API Key
      run: |
        # Escape special characters in the API key for sed
        ESCAPED_KEY=$(printf '%s\n' "${{ secrets.OPENAI_API_KEY }}" | sed -e 's/[\/&]/\\&/g')

        # Update appsettings.json with OpenAI API key from secrets
        sed -i "s/\"OpenAIApiKey\": \"\"/\"OpenAIApiKey\": \"$ESCAPED_KEY\"/g" server/apis/appsettings.json
        echo "✅ OpenAI API key injected into appsettings.json"

        # Verify the key was injected
        echo "📋 Verifying appsettings.json:"
        grep -o '"OpenAIApiKey": "[^"]*"' server/apis/appsettings.json | head -c 50
        echo "..."

    - name: Store OpenAI API Key in AWS Secrets Manager
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        SECRET_NAME="guras/openai-api-key"

        echo "🔐 Storing OpenAI API key in AWS Secrets Manager..."
        echo "📍 Environment: $ENVIRONMENT"
        echo "📍 Secret name: $SECRET_NAME"

        # Check if secret exists
        if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" --region ${{ env.AWS_REGION }} 2>/dev/null; then
          echo "📝 Secret exists, updating..."
          aws secretsmanager update-secret \
            --secret-id "$SECRET_NAME" \
            --secret-string "${{ secrets.OPENAI_API_KEY }}" \
            --region ${{ env.AWS_REGION }}
          echo "✅ Secret updated successfully"
        else
          echo "📝 Secret does not exist, creating..."
          aws secretsmanager create-secret \
            --name "$SECRET_NAME" \
            --secret-string "${{ secrets.OPENAI_API_KEY }}" \
            --region ${{ env.AWS_REGION }} \
            --tags Key=Environment,Value=$ENVIRONMENT Key=Application,Value=guras
          echo "✅ Secret created successfully"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup ECR Repository URL
      id: ecr-repo
      run: |
        ECR_REPO_URL=480875380190.dkr.ecr.us-east-1.amazonaws.com/guras-server
        echo "ECR_REPO_URL=$ECR_REPO_URL" >> $GITHUB_OUTPUT
        echo "📦 ECR Repository URL: $ECR_REPO_URL"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.ecr-repo.outputs.ECR_REPO_URL }}
        tags: |
          type=raw,value=${{ steps.version.outputs.version }},enable=true
          type=raw,value=latest,enable=true

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create and push git tag
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "🏷️ Creating tag $VERSION"
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create tag using version number directly
        git tag "$VERSION"
        
        # Push tag
        git push origin "$VERSION"
        
        echo "✅ Created and pushed tag: $VERSION"

    - name: Output image info
      run: |
        echo "✅ Docker image built and pushed successfully!"
        echo "📦 Repository: ${{ steps.ecr-repo.outputs.ECR_REPO_URL }}"
        echo "🏷️  Version: ${{ steps.version.outputs.version }}"
        echo "🏷️  Tags: ${{ steps.meta.outputs.tags }}"
        echo "🌍 Region: ${{ env.AWS_REGION }}"
        echo "🏗️  Environment: ${{ github.event.inputs.environment || 'staging' }}"