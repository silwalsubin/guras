name: Terraform Deploy

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      auto_approve:
        description: 'Auto approve changes (use with caution)'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: "1.5.0"
  AWS_REGION: "us-east-1"

jobs:
  validate:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: |
        cd iac/terraform
        terraform fmt -check -recursive || true

    - name: Terraform Init
      run: |
        cd iac/terraform/environments/staging
        terraform init

    - name: Terraform Validate
      run: |
        cd iac/terraform/environments/staging
        terraform validate

  plan-staging:
    name: Plan Staging Changes
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd iac/terraform/environments/staging
        terraform init

    - name: Force Unlock State (if needed)
      run: |
        cd iac/terraform/environments/staging
        terraform force-unlock 88b4ad3f-926c-46c5-1938-dbaa149bc1b2 || echo "No lock to unlock or unlock failed"
        sleep 5
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      run: |
        cd iac/terraform/environments/staging
        terraform plan -out=tfplan
        terraform show -no-color tfplan > plan.txt
      continue-on-error: true

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: staging-plan
        path: iac/terraform/environments/staging/plan.txt

  apply-staging:
    name: Apply Staging Changes
    runs-on: ubuntu-latest
    needs: plan-staging
    if: github.event.inputs.action == 'apply' && github.event.inputs.environment == 'staging'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd iac/terraform/environments/staging
        terraform init

    - name: Force Unlock State (if needed)
      run: |
        cd iac/terraform/environments/staging
        terraform force-unlock 88b4ad3f-926c-46c5-1938-dbaa149bc1b2 || echo "No lock to unlock or unlock failed"
        sleep 5
      continue-on-error: true

    - name: Terraform Apply
      run: |
        cd iac/terraform/environments/staging
        terraform apply -auto-approve

    - name: Get Staging Outputs
      id: staging-outputs
      run: |
        cd iac/terraform/environments/staging
        
        # Debug: Check terraform state
        echo "Checking Terraform state..."
        terraform state list || echo "No state found"
        
        # Debug: List all outputs
        echo "Available outputs:"
        terraform output || echo "No outputs found"
        
        # Try to get outputs with better error handling
        echo "Attempting to get outputs..."
        
        # Get alb_dns_name output
        ALB_DNS_NAME=$(terraform output -raw alb_dns_name 2>/dev/null || echo "not_available")
        echo "alb_dns_name=$ALB_DNS_NAME" >> $GITHUB_OUTPUT
        
        # Get ecr_repository_url output
        ECR_REPO_URL=$(terraform output -raw ecr_repository_url 2>/dev/null || echo "not_available")
        echo "ecr_repository_url=$ECR_REPO_URL" >> $GITHUB_OUTPUT
        
        echo "Outputs captured successfully"
      continue-on-error: true

  plan-production:
    name: Plan Production Changes
    runs-on: ubuntu-latest
    needs: [validate, apply-staging]
    if: github.event.inputs.action == 'apply' && github.event.inputs.environment == 'production'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd iac/terraform/environments/production
        terraform init

    - name: Force Unlock State (if needed)
      run: |
        cd iac/terraform/environments/production
        terraform force-unlock 88b4ad3f-926c-46c5-1938-dbaa149bc1b2 || echo "No lock to unlock or unlock failed"
        sleep 5
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      run: |
        cd iac/terraform/environments/production
        terraform plan -out=tfplan
        terraform show -no-color tfplan > plan.txt
      continue-on-error: true

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: production-plan
        path: iac/terraform/environments/production/plan.txt

  apply-production:
    name: Apply Production Changes
    runs-on: ubuntu-latest
    needs: plan-production
    if: github.event.inputs.action == 'apply' && github.event.inputs.environment == 'production'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd iac/terraform/environments/production
        terraform init

    - name: Force Unlock State (if needed)
      run: |
        cd iac/terraform/environments/production
        terraform force-unlock 88b4ad3f-926c-46c5-1938-dbaa149bc1b2 || echo "No lock to unlock or unlock failed"
        sleep 5
      continue-on-error: true

    - name: Terraform Apply
      run: |
        cd iac/terraform/environments/production
        terraform apply -auto-approve

    - name: Get Production Outputs
      id: production-outputs
      run: |
        cd iac/terraform/environments/production
        
        # Debug: Check terraform state
        echo "Checking Terraform state..."
        terraform state list || echo "No state found"
        
        # Debug: List all outputs
        echo "Available outputs:"
        terraform output || echo "No outputs found"
        
        # Try to get outputs with better error handling
        echo "Attempting to get outputs..."
        
        # Get alb_dns_name output
        ALB_DNS_NAME=$(terraform output -raw alb_dns_name 2>/dev/null || echo "not_available")
        echo "alb_dns_name=$ALB_DNS_NAME" >> $GITHUB_OUTPUT
        
        # Get ecr_repository_url output
        ECR_REPO_URL=$(terraform output -raw ecr_repository_url 2>/dev/null || echo "not_available")
        echo "ecr_repository_url=$ECR_REPO_URL" >> $GITHUB_OUTPUT
        
        echo "Outputs captured successfully"
      continue-on-error: true