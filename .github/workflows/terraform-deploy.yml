name: Terraform Deploy

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      auto_approve:
        description: 'Auto approve changes (use with caution)'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: "1.5.0"
  AWS_REGION: "us-east-1"

jobs:
  validate:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: |
        cd iac/terraform
        terraform fmt -check -recursive || true

    - name: Terraform Init
      run: |
        cd iac/terraform/environments/staging
        terraform init

    - name: Terraform Validate
      run: |
        cd iac/terraform/environments/staging
        terraform validate

  plan-staging:
    name: Plan Staging Changes
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd iac/terraform/environments/staging
        terraform init

    - name: Terraform Plan
      id: plan
      run: |
        cd iac/terraform/environments/staging
        terraform plan -out=tfplan
        terraform show -no-color tfplan > plan.txt
      continue-on-error: true

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: staging-plan
        path: iac/terraform/environments/staging/plan.txt

  apply-staging:
    name: Apply Staging Changes
    runs-on: ubuntu-latest
    needs: plan-staging
    if: github.event.inputs.action == 'apply' && github.event.inputs.environment == 'staging'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd iac/terraform/environments/staging
        terraform init

    - name: Terraform Apply
      run: |
        cd iac/terraform/environments/staging
        terraform apply -auto-approve

    - name: Create ACM DNS Validation Record
      run: |
        cd iac/terraform/environments/staging
        
        # Get the certificate ARN from Terraform state
        CERT_ARN=$(terraform output -raw certificate_arn 2>/dev/null || echo "")
        
        if [ -n "$CERT_ARN" ]; then
          echo "Certificate ARN found: $CERT_ARN"
          
          # Get the DNS validation details
          VALIDATION_DETAILS=$(aws acm describe-certificate --certificate-arn $CERT_ARN --region us-east-1 --query 'Certificate.DomainValidationOptions[0].ResourceRecord' --output json)
          
          if [ "$VALIDATION_DETAILS" != "null" ]; then
            echo "Validation details: $VALIDATION_DETAILS"
            
            # Extract the CNAME record details
            RECORD_NAME=$(echo $VALIDATION_DETAILS | jq -r '.Name')
            RECORD_VALUE=$(echo $VALIDATION_DETAILS | jq -r '.Value')
            RECORD_TYPE=$(echo $VALIDATION_DETAILS | jq -r '.Type')
            
            echo "Creating DNS record:"
            echo "  Name: $RECORD_NAME"
            echo "  Type: $RECORD_TYPE"
            echo "  Value: $RECORD_VALUE"
            
            # Create the DNS record in Route 53
            aws route53 change-resource-record-sets \
              --hosted-zone-id Z0310972MNRO84YKPIQD \
              --change-batch "{
                \"Changes\": [
                  {
                    \"Action\": \"UPSERT\",
                    \"ResourceRecordSet\": {
                      \"Name\": \"$RECORD_NAME\",
                      \"Type\": \"$RECORD_TYPE\",
                      \"TTL\": 300,
                      \"ResourceRecords\": [
                        {
                          \"Value\": \"$RECORD_VALUE\"
                        }
                      ]
                    }
                  }
                ]
              }"
            
            echo "DNS validation record created successfully"
          else
            echo "No DNS validation details found for certificate"
          fi
        else
          echo "Certificate ARN not found in Terraform outputs"
        fi
      continue-on-error: true

    - name: Wait for Certificate Validation
      run: |
        cd iac/terraform/environments/staging
        
        # Get the certificate ARN from Terraform state
        CERT_ARN=$(terraform output -raw certificate_arn 2>/dev/null || echo "")
        
        if [ -n "$CERT_ARN" ]; then
          echo "Waiting for certificate validation to complete..."
          
          # Wait up to 10 minutes for validation
          for i in {1..60}; do
            STATUS=$(aws acm describe-certificate --certificate-arn $CERT_ARN --region us-east-1 --query 'Certificate.Status' --output text)
            echo "Certificate status: $STATUS (attempt $i/60)"
            
            if [ "$STATUS" = "ISSUED" ]; then
              echo "Certificate validation completed successfully!"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Certificate validation failed!"
              exit 1
            fi
            
            sleep 10
          done
          
          if [ "$STATUS" != "ISSUED" ]; then
            echo "Certificate validation did not complete within 10 minutes"
            echo "You may need to check DNS propagation manually"
          fi
        else
          echo "Certificate ARN not found, skipping validation wait"
        fi
      continue-on-error: true

    - name: Get Staging Outputs
      id: staging-outputs
      run: |
        cd iac/terraform/environments/staging
        
        # Debug: Check terraform state
        echo "Checking Terraform state..."
        terraform state list || echo "No state found"
        
        # Debug: List all outputs
        echo "Available outputs:"
        terraform output || echo "No outputs found"
        
        # Try to get outputs with better error handling
        echo "Attempting to get outputs..."
        
        # Get alb_dns_name output
        ALB_DNS_NAME=$(terraform output -raw alb_dns_name 2>/dev/null || echo "not_available")
        echo "alb_dns_name=$ALB_DNS_NAME" >> $GITHUB_OUTPUT
        
        # Get ecr_repository_url output
        ECR_REPO_URL=$(terraform output -raw ecr_repository_url 2>/dev/null || echo "not_available")
        echo "ecr_repository_url=$ECR_REPO_URL" >> $GITHUB_OUTPUT
        
        # Get domain URLs
        MAIN_DOMAIN_URL=$(terraform output -raw main_domain_url 2>/dev/null || echo "not_available")
        echo "main_domain_url=$MAIN_DOMAIN_URL" >> $GITHUB_OUTPUT
        
        STAGING_SUBDOMAIN_URL=$(terraform output -raw staging_subdomain_url 2>/dev/null || echo "not_available")
        echo "staging_subdomain_url=$STAGING_SUBDOMAIN_URL" >> $GITHUB_OUTPUT
        
        echo "Outputs captured successfully"
      continue-on-error: true

  plan-production:
    name: Plan Production Changes
    runs-on: ubuntu-latest
    needs: [validate, apply-staging]
    if: github.event.inputs.action == 'apply' && github.event.inputs.environment == 'production'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd iac/terraform/environments/production
        terraform init

    - name: Terraform Plan
      id: plan
      run: |
        cd iac/terraform/environments/production
        terraform plan -out=tfplan
        terraform show -no-color tfplan > plan.txt
      continue-on-error: true

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: production-plan
        path: iac/terraform/environments/production/plan.txt

  apply-production:
    name: Apply Production Changes
    runs-on: ubuntu-latest
    needs: plan-production
    if: github.event.inputs.action == 'apply' && github.event.inputs.environment == 'production'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd iac/terraform/environments/production
        terraform init

    - name: Terraform Apply
      run: |
        cd iac/terraform/environments/production
        terraform apply -auto-approve

    - name: Create ACM DNS Validation Record
      run: |
        cd iac/terraform/environments/production
        
        # Get the certificate ARN from Terraform state
        CERT_ARN=$(terraform output -raw certificate_arn 2>/dev/null || echo "")
        
        if [ -n "$CERT_ARN" ]; then
          echo "Certificate ARN found: $CERT_ARN"
          
          # Get the DNS validation details
          VALIDATION_DETAILS=$(aws acm describe-certificate --certificate-arn $CERT_ARN --region us-east-1 --query 'Certificate.DomainValidationOptions[0].ResourceRecord' --output json)
          
          if [ "$VALIDATION_DETAILS" != "null" ]; then
            echo "Validation details: $VALIDATION_DETAILS"
            
            # Extract the CNAME record details
            RECORD_NAME=$(echo $VALIDATION_DETAILS | jq -r '.Name')
            RECORD_VALUE=$(echo $VALIDATION_DETAILS | jq -r '.Value')
            RECORD_TYPE=$(echo $VALIDATION_DETAILS | jq -r '.Type')
            
            echo "Creating DNS record:"
            echo "  Name: $RECORD_NAME"
            echo "  Type: $RECORD_TYPE"
            echo "  Value: $RECORD_VALUE"
            
            # Create the DNS record in Route 53
            aws route53 change-resource-record-sets \
              --hosted-zone-id Z0310972MNRO84YKPIQD \
              --change-batch "{
                \"Changes\": [
                  {
                    \"Action\": \"UPSERT\",
                    \"ResourceRecordSet\": {
                      \"Name\": \"$RECORD_NAME\",
                      \"Type\": \"$RECORD_TYPE\",
                      \"TTL\": 300,
                      \"ResourceRecords\": [
                        {
                          \"Value\": \"$RECORD_VALUE\"
                        }
                      ]
                    }
                  }
                ]
              }"
            
            echo "DNS validation record created successfully"
          else
            echo "No DNS validation details found for certificate"
          fi
        else
          echo "Certificate ARN not found in Terraform outputs"
        fi
      continue-on-error: true

    - name: Wait for Certificate Validation
      run: |
        cd iac/terraform/environments/production
        
        # Get the certificate ARN from Terraform state
        CERT_ARN=$(terraform output -raw certificate_arn 2>/dev/null || echo "")
        
        if [ -n "$CERT_ARN" ]; then
          echo "Waiting for certificate validation to complete..."
          
          # Wait up to 10 minutes for validation
          for i in {1..60}; do
            STATUS=$(aws acm describe-certificate --certificate-arn $CERT_ARN --region us-east-1 --query 'Certificate.Status' --output text)
            echo "Certificate status: $STATUS (attempt $i/60)"
            
            if [ "$STATUS" = "ISSUED" ]; then
              echo "Certificate validation completed successfully!"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Certificate validation failed!"
              exit 1
            fi
            
            sleep 10
          done
          
          if [ "$STATUS" != "ISSUED" ]; then
            echo "Certificate validation did not complete within 10 minutes"
            echo "You may need to check DNS propagation manually"
          fi
        else
          echo "Certificate ARN not found, skipping validation wait"
        fi
      continue-on-error: true

    - name: Get Production Outputs
      id: production-outputs
      run: |
        cd iac/terraform/environments/production
        
        # Debug: Check terraform state
        echo "Checking Terraform state..."
        terraform state list || echo "No state found"
        
        # Debug: List all outputs
        echo "Available outputs:"
        terraform output || echo "No outputs found"
        
        # Try to get outputs with better error handling
        echo "Attempting to get outputs..."
        
        # Get alb_dns_name output
        ALB_DNS_NAME=$(terraform output -raw alb_dns_name 2>/dev/null || echo "not_available")
        echo "alb_dns_name=$ALB_DNS_NAME" >> $GITHUB_OUTPUT
        
        # Get ecr_repository_url output
        ECR_REPO_URL=$(terraform output -raw ecr_repository_url 2>/dev/null || echo "not_available")
        echo "ecr_repository_url=$ECR_REPO_URL" >> $GITHUB_OUTPUT
        
        # Get domain URLs
        MAIN_DOMAIN_URL=$(terraform output -raw main_domain_url 2>/dev/null || echo "not_available")
        echo "main_domain_url=$MAIN_DOMAIN_URL" >> $GITHUB_OUTPUT
        
        STAGING_SUBDOMAIN_URL=$(terraform output -raw staging_subdomain_url 2>/dev/null || echo "not_available")
        echo "staging_subdomain_url=$STAGING_SUBDOMAIN_URL" >> $GITHUB_OUTPUT
        
        echo "Outputs captured successfully"
      continue-on-error: true