name: Terraform Bootstrap

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
      auto_approve:
        description: 'Auto approve changes (use with caution)'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: "1.5.0"
  AWS_REGION: "us-east-1"

jobs:
  validate:
    name: Validate Bootstrap Configuration
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: |
        cd iac/terraform/bootstrap
        terraform fmt -check || echo "Format check completed"

    - name: Terraform Init
      run: |
        cd iac/terraform/bootstrap
        terraform init

    - name: Terraform Validate
      run: |
        cd iac/terraform/bootstrap
        terraform validate

  plan:
    name: Plan Bootstrap Changes
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd iac/terraform/bootstrap
        terraform init

    - name: Terraform Plan
      id: plan
      run: |
        cd iac/terraform/bootstrap
        terraform plan -out=tfplan
        terraform show -no-color tfplan > plan.txt
      continue-on-error: true

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: bootstrap-plan
        path: iac/terraform/bootstrap/plan.txt

  apply:
    name: Apply Bootstrap Changes
    runs-on: ubuntu-latest
    needs: plan
    if: github.event.inputs.action == 'apply'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd iac/terraform/bootstrap
        terraform init

    - name: Check and Import Existing Resources
      run: |
        cd iac/terraform/bootstrap
        
        # Check if S3 buckets exist and import them if they do
        if aws s3api head-bucket --bucket guras-terraform-state-staging 2>/dev/null; then
          echo "Staging bucket exists, importing into Terraform state..."
          terraform import aws_s3_bucket.staging_state guras-terraform-state-staging || echo "Import failed or already imported"
          terraform import aws_s3_bucket_versioning.staging_state guras-terraform-state-staging || echo "Versioning import failed or already imported"
          terraform import aws_s3_bucket_server_side_encryption_configuration.staging_state guras-terraform-state-staging || echo "Encryption import failed or already imported"
          terraform import aws_s3_bucket_public_access_block.staging_state guras-terraform-state-staging || echo "Public access block import failed or already imported"
        fi
        
        if aws s3api head-bucket --bucket guras-terraform-state-production 2>/dev/null; then
          echo "Production bucket exists, importing into Terraform state..."
          terraform import aws_s3_bucket.production_state guras-terraform-state-production || echo "Import failed or already imported"
          terraform import aws_s3_bucket_versioning.production_state guras-terraform-state-production || echo "Versioning import failed or already imported"
          terraform import aws_s3_bucket_server_side_encryption_configuration.production_state guras-terraform-state-production || echo "Encryption import failed or already imported"
          terraform import aws_s3_bucket_public_access_block.production_state guras-terraform-state-production || echo "Public access block import failed or already imported"
        fi
        
        # Check if DynamoDB table exists and import it if it does
        if aws dynamodb describe-table --table-name guras-terraform-locks 2>/dev/null; then
          echo "DynamoDB table exists, importing into Terraform state..."
          terraform import aws_dynamodb_table.terraform_locks guras-terraform-locks || echo "Import failed or already imported"
        fi
        
        # Check if IAM policy exists and import it if it does
        if aws iam list-policies --scope Local --query 'Policies[?PolicyName==`guras-terraform-state-access`]' --output text | grep -q guras-terraform-state-access; then
          echo "IAM policy exists, getting ARN and importing into Terraform state..."
          POLICY_ARN=$(aws iam list-policies --scope Local --query 'Policies[?PolicyName==`guras-terraform-state-access`].Arn' --output text)
          terraform import aws_iam_policy.terraform_state_access "$POLICY_ARN" || echo "IAM policy import failed or already imported"
        fi

    - name: Terraform Apply
      run: |
        cd iac/terraform/bootstrap
        terraform apply -auto-approve

    - name: Get Bootstrap Outputs
      id: bootstrap-outputs
      run: |
        cd iac/terraform/bootstrap
        # Check if outputs exist before trying to get them
        if terraform output staging_state_bucket >/dev/null 2>&1; then
          echo "staging_bucket=$(terraform output -raw staging_state_bucket)" >> $GITHUB_OUTPUT
        else
          echo "staging_bucket=not_available" >> $GITHUB_OUTPUT
        fi
        
        if terraform output production_state_bucket >/dev/null 2>&1; then
          echo "production_bucket=$(terraform output -raw production_state_bucket)" >> $GITHUB_OUTPUT
        else
          echo "production_bucket=not_available" >> $GITHUB_OUTPUT
        fi
        
        if terraform output dynamodb_table >/dev/null 2>&1; then
          echo "dynamodb_table=$(terraform output -raw dynamodb_table)" >> $GITHUB_OUTPUT
        else
          echo "dynamodb_table=not_available" >> $GITHUB_OUTPUT
        fi
        
        if terraform output terraform_state_access_policy_arn >/dev/null 2>&1; then
          echo "terraform_state_access_policy_arn=$(terraform output -raw terraform_state_access_policy_arn)" >> $GITHUB_OUTPUT
        else
          echo "terraform_state_access_policy_arn=not_available" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true